plugins {
	id "java"
	id "maven-publish"
	id "java-gradle-plugin"
	id "idea"
	id "eclipse"
}

java {
	sourceCompatibility = "1.8"
	targetCompatibility = "1.8"
}

repositories {
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
		
		if(it.respondsTo("mavenContent")) { //doesn't exist in Gradle 4
			it.mavenContent {
				includeGroup("net.fabricmc")
				includeGroup("org.jetbrains")
				includeGroup("org.cadixdev")
			}
		}
	}
	
	mavenCentral()
}

dependencies {
	implementation gradleApi()
	implementation "com.google.code.gson:gson:2.8.5"
	implementation "com.google.guava:guava:28.0-jre"
	
	//mapping tools
	implementation ("net.fabricmc:stitch:0.4.3.71") { exclude module: "enigma" }
	implementation ("net.fabricmc:tiny-remapper:0.2.0.57") { transitive = false }
	implementation ("net.fabricmc:lorenz-tiny:1.0.0+build.1") { transitive = false }
	
	//other stuff
	implementation "org.jetbrains:intellij-fernflower:1.1.0.11" //decompiler
	implementation "org.cadixdev:mercury:0.1.0.fabric-SNAPSHOT" //source remapper
}

jar {
	manifest {
		String build = "local"
		if(System.getenv().BUILD_NUMBER) {
			build = "jenkins #${System.getenv().BUILD_NUMBER}"
		}
		
		//Reading from project.version is deprecated in Gradle 7 lol
		String ver = project.respondsTo("archivesVersion") ? project.archivesVersion : project.version
		attributes 'Implementation-Version': ver + " Build(" + build + ")"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

gradlePlugin {
	plugins {
		"${name}" {
			id = "${group}.${name}"
			implementationClass = "net.fabricmc.loom.LoomGradlePlugin"
		}
	}
}

publishing {
	publications {
		plugin(MavenPublication) { publication ->
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			from components["java"]

			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		if (project.hasProperty("publish-username")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username project.hasProperty("publish-username") ? project.getProperty("publish-username") : null
					password project.hasProperty("publish-password") ? project.getProperty("publish-password") : null
				}
			}
		}
		maven {
			url file("build/maven").toURI().toString()
		}
	}
}
