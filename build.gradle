plugins {
	id "java"
	id "maven-publish"
	id "java-gradle-plugin"
	id "idea"
	id "eclipse"
}

//Heads up: This buildscript is a bit weird, because some of the "sample" projects compile it against Gradle 4,
//but others compile it against Gradle 7. The sample projects retrieve the plugin as an included build, not as
//a separate artifact (mainly to avoid a roundtrip through mavenLocal), which causes all sorts of fun problems
//in practice. I probably shouldn't do that.

// CI nonsense //

String buildContext = "Local"

if(System.getenv("GITHUB_SHA") != null) {
	String hash = System.getenv("GITHUB_SHA"); if(hash.length() > 8) hash = hash.substring(0, 8)
	buildContext = "Github Actions CI, commit " + hash
	
	if(System.getenv("VOLDE_RELEASE_MODE") == null) {
		version += "-SNAPSHOT"
	}
}

// Pre-toolchains: the canonical way to set source compatibility?     //
// Post-toolchains: used as a default when no toolchain is configured //

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

// Dependencies //

repositories {
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
		
		if(it.respondsTo("mavenContent")) { //doesn't exist in Gradle 4
			it.mavenContent {
				includeGroup("net.fabricmc")
				includeGroup("org.jetbrains")
				includeGroup("org.cadixdev")
			}
		}
	}
	
	mavenCentral()
}

dependencies {
	implementation gradleApi() //for the currently-running version of Gradle
	implementation "com.google.code.gson:gson:2.8.5"
	implementation "com.google.guava:guava:28.0-jre"
	
	//mapping tools
	implementation ("net.fabricmc:stitch:0.4.3.71") { exclude module: "enigma" }
	implementation ("net.fabricmc:tiny-remapper:0.2.0.57") { transitive = false }
	implementation ("net.fabricmc:lorenz-tiny:1.0.0+build.1") { transitive = false }
	
	//Forge 1.6's binpatches.pack.lzma
	implementation "org.apache.commons:commons-compress:1.22"
	implementation "org.tukaani:xz:1.9" //commons-compress LZMA support
	//implementation "lzma:lzma:0.0.1" //Weird mystery lzma decompressor that Forge uses (on spongepowered maven)
	
	//other stuff
	implementation "org.jetbrains:intellij-fernflower:1.1.0.11" //decompiler
	implementation "org.cadixdev:mercury:0.1.0.fabric-SNAPSHOT" //source remapper
}

// Properties of the artifact //

jar {
	manifest {
		//Reading from project.version is deprecated in Gradle 7 lol
		String ver = project.respondsTo("archivesVersion") ? project.archivesVersion : project.version
		attributes "Implementation-Version": "${ver} (build ctx: ${buildContext})"
	}
}

gradlePlugin {
	plugins {
		"${name}" {
			id = "${group}.${name}"
			implementationClass = "net.fabricmc.loom.LoomGradlePlugin"
		}
	}
}

// Publishing //

task sourcesJar(type: Jar, dependsOn: classes) {
	if(it.hasProperty("archiveClassifier")) it.archiveClassifier = "sources" //Gradle 7, 8
	else it.classifier = "sources" //Gradle 4
	
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	if(it.hasProperty("archiveClassifier")) it.archiveClassifier = "javadoc" //Gradle 7, 8
	else it.classifier = "javadoc" //Gradle 4
	
	from javadoc.destinationDir
}

publishing {
	publications {
		plugin(MavenPublication) { publication ->
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			from components["java"]

			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		if (project.hasProperty("publish-username")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username project.hasProperty("publish-username") ? project.getProperty("publish-username") : null
					password project.hasProperty("publish-password") ? project.getProperty("publish-password") : null
				}
			}
		}
		maven {
			url file("build/maven").toURI().toString()
		}
	}
}

// Javadoc settings //

javadoc {
	options {
		List<String> links = []
		links.add("https://docs.gradle.org/${gradle.gradleVersion}/javadoc/")
		links.add("https://javadoc.io/doc/com.google.code.gson/gson/2.8.5/")
		links.add("https://javadoc.io/doc/com.google.guava/guava/28.0-jre/")
		
		//yoinked off stackoverflow https://stackoverflow.com/questions/10766238/javadoc-parameter-without-package-name
		if (JavaVersion.current().isJava11Compatible()) {
			links.add("https://docs.oracle.com/en/java/javase/${JavaVersion.current().majorVersion}/docs/api/")
		} else {
			links.add("https://docs.oracle.com/javase/${JavaVersion.current().majorVersion}/docs/api/")
		}
		
		it.links(links as String[])
	}
}