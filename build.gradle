plugins {
	id 'java'
	id 'maven-publish'
	id 'java-gradle-plugin'
	id 'idea'
	id 'eclipse'
	id 'groovy'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.unascribed'
archivesBaseName = 'voldeloom'
version = '1.0+1.4.7disaster'

repositories {
	mavenCentral()
	maven {
		name = "Fabric"
		url = 'https://maven.fabricmc.net/'
	}
}

dependencies {
	implementation gradleApi()

	// libraries
	implementation ('com.google.code.gson:gson:2.8.5')
	implementation ('com.google.guava:guava:28.0-jre')

	// game handling utils
	implementation ('net.fabricmc:stitch:0.4.3.71') {
		exclude module: 'enigma'
	}

	// tinyfile management
	implementation ('net.fabricmc:tiny-remapper:0.2.0.57') {
		transitive = false
	}

	implementation ('net.fabricmc:lorenz-tiny:1.0.0+build.1') {
		transitive = false
	}

	// decompilers
	implementation ('net.fabricmc:procyon-fabric-compilertools:0.5.35.+')
	implementation ('org.jetbrains:intellij-fernflower:1.1.0.11')

	// source code remapping
	implementation ('org.cadixdev:mercury:0.1.0.fabric-SNAPSHOT')
}

configurations.all {
	resolutionStrategy {
		force 'org.codehaus.groovy:groovy-all:2.4.12'
	}
}

jar {
	manifest {
		def build = "local"
		if(System.getenv().BUILD_NUMBER) {
			build = "jenkins #${System.getenv().BUILD_NUMBER}"
		}
		
		attributes 'Implementation-Version': version + " Build(" + build + ")"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

gradlePlugin {
	plugins {
		fabricLoom {
			id = "com.unascribed.voldeloom"
			implementationClass = "net.fabricmc.loom.LoomGradlePlugin"
		}
	}
}

publishing {
	publications {
		plugin(MavenPublication) { publication ->
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			from components["java"]

			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		if (project.hasProperty("publish-username")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username project.hasProperty("publish-username") ? project.getProperty("publish-username") : null
					password project.hasProperty("publish-password") ? project.getProperty("publish-password") : null
				}
			}
		}
		maven {
			url file('build/maven').toURI().toString()
		}
	}
}